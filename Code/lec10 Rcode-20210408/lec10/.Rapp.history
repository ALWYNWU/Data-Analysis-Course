############ Lecture 10 Iris data ###########
############# LLK @ Edmonton Jan 24, 2016 ############
#
data(iris)#
#
#pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_1.pdf")#
#
pairs(iris[,-5],pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
#
#dev.off()#
#
library(MASS)#
#
### LDA #
#
iris.lda = lda(Species ~ ., data = iris, prior = c(1,1,1)/3)#
#
iris.pred = predict(iris.lda, data= iris[,-5])#
#
# draw decision boundary #
LD = iris.pred$x#
#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])
iris.lda
iris.pred = predict(iris.lda, data= iris[,-5])
iris.pred
library(klaR)#
partimat(Species ~ .,data=iris,method="lda")
LD.data = cbind(LD,iris[,5])
LD.data
LD = iris.pred$x#
#
LD.data = cbind(LD,iris[,5])#
lda.fit = lda(LD.data[,3]~.,data=LD.data)
LD.data = data.frame(cbind(LD,iris[,5]))#
lda.fit = lda(LD.data[,3]~.,data=LD.data)
iris[,5])
iris[,5]
LD.data = data.frame(cbind(LD,iris[,5]))#
names(LD.data) = c('LD1','LD2','Res')#
lda.fit = lda(Res ~.,data=LD.data)
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
x <- expand.grid(x1, x2)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=newdat)$class)
lda.Ghat <- as.numeric(predict(lda.fit, newdata=x)$class)
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2), add=TRUE, drawlabels=FALSE, col="red")
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="red")
iris.lda
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink")
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10),height=6,width=9)#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
GS <- 1000#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
LD = iris.pred$x#
#
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=16, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(-x1, -x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
LD = iris.pred$x#
#
LD.data = data.frame(cbind(-LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=16, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(-LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 500#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
library(MASS)#
#
### LDA #
#
iris.lda = lda(Species ~ ., data = iris)#
#
iris.pred = predict(iris.lda, data= iris[,-5])#
#
table(iris.pred$class,iris[,5])#
#
# draw decision boundary #
#
LD = iris.pred$x
LD.data = data.frame(cbind(-LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 100#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris.pred$class)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(-LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 100#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(-iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 100#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
### LDA #
#
iris.lda = lda(Species ~ ., data = iris,prior = c(1,1,1)/3)#
#
iris.pred = predict(iris.lda, data= iris[,-5])#
#
table(iris.pred$class,iris[,5])#
#
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 250#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
dev.new(height=6,width=9)#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)],xlim=c(-10,10))#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
############ Lecture 10 Iris data ###########
############# LLK @ Edmonton Jan 24, 2016 ############
#
data(iris)#
#
#pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_1.pdf")#
#
pairs(iris[,-5],pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
#
#dev.off()#
#
library(MASS)#
#
### LDA #
#
iris.lda = lda(Species ~ ., data = iris,prior = c(1,1,1)/3)#
#
iris.pred = predict(iris.lda, data= iris[,-5])#
#
table(iris.pred$class,iris[,5])#
#
# draw decision boundary #
#
LD = iris.pred$x#
#
LD.data = data.frame(cbind(LD,iris.pred$class))#
names(LD.data) = c('LD1','LD2','Res')#
#
lda.fit = lda(Res ~.,data=LD.data)#
#
GS <- 250#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
iris.lda
lda.pred = predict(lda.fit, data= LD.data[,-3])#
#
table(lda.pred$class,LD.data[,3])
table(iris.pred$class,iris[,5])
table(lda.pred$class,iris[,5])
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=TRUE, col="pink",lwd = 2)
hist(iris$Species)
table(iris$Species)
lda.fit = lda(Res ~.,data=LD.data,prior = c(1,1,1)/3)#
#
# lda.pred = predict(lda.fit, data= LD.data[,-3])#
#
# table(lda.pred$class,iris[,5])#
GS <- 250#
x1 <- seq(min(LD.data[,1]), max(LD.data[,1]), len=GS)#
x2 <- seq(min(LD.data[,2]), max(LD.data[,2]), len=GS)#
#
lda.Ghat <- as.numeric(predict(lda.fit, newdata=list(LD1=x1,LD2=x2))$class)#
#
plot(iris.pred$x,pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
unclass(iris$Species)
plot(iris.pred$x, bg=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
plot(iris.pred$x, col=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_1.pdf")#
#
plot(iris.pred$x, col=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)#
#
dev.off()
pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_2.pdf")
plot(iris.pred$x, col=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
dev.off()
pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_1.pdf")
pairs(iris[,-5],pch=21, bg=c("red","green3","blue")[unclass(iris$Species)])
dev.off()
pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_2.pdf",ehight=4,width=8)
pdf("/Volumes/MHD2/Study/2016/teach/stat441/lec/lec10/lec10_2.pdf",height=4,width=8)
plot(iris.pred$x, col=c("red","green3","blue")[unclass(iris$Species)])#
contour(x1, x2, matrix(lda.Ghat, GS,GS), levels=c(1,2,3), add=TRUE, drawlabels=FALSE, col="pink",lwd = 2)
dev.off()
############ Lecture 10 Iris data ###########
############# LLK @ Edmonton Jan 24, 2016 ############
#
data(iris)
save.table(iris,"/Volumes/MHD2/Study/2016/teach/stat441/dataset/lec10.iris.txt")
data(iris)#
#
write.table(iris,"/Volumes/MHD2/Study/2016/teach/stat441/dataset/lec10.iris.txt")
default[1:10,]
############## lec 10 Credit data #############
######## Linglong Kong @ Edmonton Jan 24, 2016 #########
#
defaultData = read.table("/Volumes/MHD2/Study/2016/teach/stat441/dataset/lec8/Default.txt",header=T)  #
# LDA #
#
library(MASS)#
#
lda.default = lda(Default ~., data = defaultData)
defaultData[1:10,]
lda.default = lda(default ~., data = defaultData)#
default.pred = predict(default.lda, data= default[,-1])
default.lda = lda(default ~., data = defaultData)#
default.pred = predict(default.lda, data= default[,-1])
table(default.pred$class,defaultData$default)
22/9667
254/333
default.pred
aa = table(default.pred$class,defaultData$default)
aa[1,1]
default.pred$post
default.pred$post[1:10,]
default.pred$post[1:10,2]
threshold1 = default.pred$post[,2]>0.1
table(threshold1,defaultData$default)
table(default.pred$class,defaultData$default)
threshold1 = default.pred$post[,1]>0.1#
#
table(threshold1,defaultData$default)
threshold1 = default.pred$post[,2]>0.1
threshold1 = default.pred$post[,2]>0.5#
#
table(threshold1,defaultData$default)
threshold1 = default.pred$post[,2]>0.1#
#
table(threshold1,defaultData$default)
threshold1 = default.pred$post[,2]>=0.1#
#
table(threshold1,defaultData$default)
threshold1 = default.pred$post[,2]>0.1#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[1,2]/sum(aa[,1])#
# False negative#
 aa[2,1]/sum(aa[,2])
threshold1 = default.pred$post[,2]>0.1#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])#
 # overall error#
(aa[2,1]+aa[1,2])/sum(sum(aa)
## change threshold#
#
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])#
 # overall error#
(aa[2,1]+aa[1,2])/sum(sum(aa) )
## change threshold#
#
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])#
 # overall error#
(aa[2,1]+aa[1,2])/sum(sum(aa) )
## change threshold#
threshold1 = default.pred$post[,2]>0.075#
aa = table(threshold1,defaultData$default)#
# False positive #
aa[2,1]/sum(aa[,1])#
# False negative#
 aa[1,2]/sum(aa[,2])#
 # overall error#
(aa[2,1]+aa[1,2])/sum(sum(aa) )
